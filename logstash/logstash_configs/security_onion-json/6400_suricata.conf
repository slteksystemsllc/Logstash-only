# Author: Justin Henderson
# Email: jhenderson@tekrefresh.comes
# Last Update: 11/16/2017
#
# This conf file is based on accepting logs for suricata json events
filter {
  if [log_event_type] == "suricata" {
    if [bytes_to_client] and [bytes_to_server] {
      if [bytes_to_client] < [bytes_to_server] {
        ruby {
          code => "event.set('byte_ratio_client', event.get('bytes_to_client').to_f / event.get('bytes_to_server').to_f)"
        }
        ruby {
          code => "event.set('byte_ratio_server', 1 - event.get('byte_ratio_client'))"
        }
      } else {
        ruby {
          code => "event.set('byte_ratio_server', event.get('bytes_to_server').to_f / event.get('bytes_to_client').to_f)"
        }
        ruby {
          code => "event.set('byte_ratio_client', 1 - event.get('byte_ratio_server'))"
        }
      }
    }
    
	  # This will translate the alert.severity field into a severity field of either High, Medium, or Low
    if [event_type] == "alert" {
      if [severity] == 1 {
        mutate {
          add_field => { "severity_level" => "High" }
        }
      }
      if [severity] == 2 {
        mutate {
          add_field => { "severity_level" => "Medium" }
        }
      }
      if [severity] == 3 {
        mutate {
          add_field => { "severity_level" => "Low" }
        }
      }
      mutate {
        gsub => [ "sid", "\D", "" ]
      }

      # If the alert is a Snort GPL alert break it apart for easier reading and categorization
      if [signature] =~ "GPL " {
	      # This will parse out the category type from the alert
        grok {
          match => { "signature" => "GPL\s+%{DATA:category}\s" }
        }
		    # This will store the category
        mutate {
          add_field => { "rule_type" => "Snort GPL" }
          lowercase => [ "category" ]
        }
      }
      # If the alert is an Emerging Threat alert break it apart for easier reading and categorization
      if [signature] =~ "ET " {
	      # This will parse out the category type from the alert
        grok {
          match => { "signature" => "ET\s+%{DATA:category}\s" }
        }
		    # This will store the category
        mutate {
          add_field => { "rule_type" => "Emerging Threats" }
        }
      }
      mutate {
        lowercase => [ "category" ]
      }
      if [gid] == 1 and [sid] =~ '^[0-9]+$' {
        translate {
          field => "sid"
          destination => "rule"
          dictionary_path => "/opt/elastic_stack/logstash/translate/rules.csv"
        }
      }
      # If rule is extracted try to parse out important rule metadata
      if [rule] {
        grok {
          break_on_match => false
          match => { "rule" => "(?<ms_security_bulletin>MS[01][0-9]-[0-9]+)" }
          match => { "rule" => "cve,(?<cve>[0-9]{0,4}-[0-9]+)" }
          match => { "rule" => "bugtraq,(?<bugtraq>[0-9]+)" }
          match => { "rule" => "securityfocus.com/bid/(?<bid>[0-9]+)" }
          match => { "rule" => "osvdb/(?<osvdb>[0-9]+)" }
          match => { "rule" => "exploit-db.com/exploits/(?<exploit_db_id>[0-9]+)" }
          tag_on_failure => []
        }
      }
	    # This section adds URLs to lookup information about a rule online
      if [rule_type] == "Snort GPL" {
        mutate {
          add_field => [ "signature_info", "https://www.snort.org/search?query=%{gid}-%{sid}" ]
        }
      }
      if [rule_type] == "Emerging Threats" {
        mutate {
          add_field => [ "signature_info", "http://doc.emergingthreats.net/%{sid}" ]
        }
      }
      # OPTIONAL - LOOKUP DNS INFORMATION ON CERTAIN CONNECTIONS
      # Update elasticsearch host info for this to work
      # Requires logstash-filter-elasticsearch plugin 
      if "potential corporate privacy violation" not in [category] and "info" not in [category] and "generic protocol command decode" not in [category] {
        elasticsearch {
          hosts => ["${ELASTICSEARCH_HOST}"]
          index => "logstash-bro-*"
          query => "log_event_type:bro AND event_type:dns AND answers:%{[destination_ip]}"
          fields => [["highest_registered_domain","source_highest_registered_domain"],["parent_domain","source_parent_domain"]]
        }
        elasticsearch {
          hosts => ["${ELASTICSEARCH_HOST}"]
          index => "logstash-bro-*"
          query => "log_event_type:bro AND event_type:dns AND answers:%{[source_ip]}"
          fields => [["highest_registered_domain","destination_highest_registered_domain"],["parent_domain","destination_parent_domain"]]
        }
      }
    }
  }
}
